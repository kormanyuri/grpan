{"version":3,"sources":["../src/VueLocale.js"],"names":[],"mappings":"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","file":"VueLocale.js","sourcesContent":["/*\n===========================================================================\n    Copyright 2015-2016 Sebastian Software GmbH, Germany\n    Licensed under Apache-2.0\n===========================================================================\n*/\n\nimport IntlMessageFormat from \"intl-messageformat\"\nimport IntlRelativeFormat from \"intl-relativeformat\"\nimport areLocalesSupported from \"intl-locales-supported\"\n\nimport createFormatCache from \"intl-format-cache\"\n\nimport { kebabCase, isPlainObject, isString, isNumber, isDate, each, clamp } from \"lodash\"\n\n// Be sure to import the Polyfill\n// TODO: Figure out if there is a ES2015 way to conditional load this\nimport \"intl\"\n\n// NodeJS by default to not offer full ICU support and therefor break the unit tests\nif (!areLocalesSupported([ \"en\", \"de\", \"fr\", \"es\" ]))\n{\n  /* global IntlPolyfill */\n  Intl.NumberFormat = IntlPolyfill.NumberFormat\n  Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat\n}\n\nconst formats = IntlMessageFormat.formats\n\nconst getCachedNumberFormat = createFormatCache(Intl.NumberFormat)\nconst getCachedDateTimeFormat = createFormatCache(Intl.DateTimeFormat)\nconst getCachedMessageFormat = createFormatCache(IntlMessageFormat)\nconst getCachedRelativeFormat = createFormatCache(IntlRelativeFormat)\n\n// A constant defined by the standard Intl.NumberFormat\n// const maximumFractionDigits = 20;\n// Unfortunately through formatting issues of percent values in IE\n// we have to use a small value here, because IE (as of v11) seems to\n// account the percent symbol + optional space to the fraction digits.\n// See also: https://github.com/sebastian-software/vue-locale/issues/1#issuecomment-215396481\nconst maximumFractionDigits = 18;\n\n\nfunction install(Vue, options)\n{\n  var { language, currency, messages } = options\n  var locale = language\n\n\n\n  // =============================================\n  //   FORMATTER FUNCTIONS\n  // =============================================\n\n  function formatDate(date, format)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(parsedDate))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatDate}}\")\n\n    if (isString(format) && format in formats.date)\n      format = formats.date[format]\n\n    return getCachedDateTimeFormat(locale, format).format(parsedDate)\n  }\n\n  function formatTime(date, format)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(date))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatTime}}\")\n\n    if (isString(format) && format in formats.time)\n      format = formats.time[format]\n\n    return getCachedDateTimeFormat(locale, format).format(parsedDate)\n  }\n\n  function formatNumber(num, format)\n  {\n    if (!isNumber(num))\n      throw new TypeError(\"A number must be provided to {{formatNumber}}\")\n\n    if (isString(format))\n    {\n      if (format === \"currency\")\n        format = { style: \"currency\", currency: currency }\n      else if (format in formats.number)\n        format = formats.number[format]\n    }\n\n    return getCachedNumberFormat(locale, format).format(num)\n  }\n\n  function formatRelative(date, format, now)\n  {\n    let parsedDate = new Date(date)\n    if (!isDate(parsedDate))\n      throw new TypeError(\"A date or timestamp must be provided to {{formatRelative}}\")\n\n    return getCachedRelativeFormat(locale, format).format(parsedDate, {\n      now: now || new Date()\n    })\n  }\n\n  function formatMessage(message, ...formatOptions)\n  {\n    // Read real message from DB\n    if (message in messages)\n      message = messages[message]\n\n    if (typeof message === \"string\")\n      message = getCachedMessageFormat(message, locale, {})\n\n    // If there is a single map parameter, use that instead of the formatOptions array\n    if (formatOptions.length === 1 && isPlainObject(formatOptions[0]))\n      formatOptions = formatOptions[0]\n\n    return message.format(formatOptions)\n  }\n\n\n\n  // =============================================\n  //   PARSERS\n  // =============================================\n\n  // Figuring out whether the separator is either \",\" or \".\" (Are there any other possibilities at all?)\n  var decimalTestNumber = 3.1\n  var decimalSeparator = formatNumber(decimalTestNumber).charAt(1)\n\n  function extractNumberParts(value)\n  {\n    var parsed = parseInt(value.replace(/[^0-9]/g, \"\"), 0)\n    return isNaN(parsed) ? 0 : parsed\n  }\n\n  function parseToNumber(value)\n  {\n    if (value == null || value === \"\")\n      return 0\n\n    var splits = value.split(decimalSeparator).map(extractNumberParts)\n\n    // Build up float number to let parseFloat convert it back into a number\n    if (splits[1] > 0)\n      return parseFloat(splits[0] + \".\" + splits[1])\n\n    // Return plain integer\n    return splits[0]\n  }\n\n\n\n\n\n  // =============================================\n  //   REGISTER FILTERS\n  // =============================================\n\n  var helpers =\n  {\n    formatDate,\n    formatTime,\n    formatRelative,\n    formatNumber,\n    formatMessage\n  }\n\n  each(helpers, function(helper, name)\n  {\n    // Adding features as a VueJS filter for easily pass a string over (only numberic parameters though)\n    Vue.filter(kebabCase(name), helper)\n\n    // Support alternative full blown calling of methods with real options object\n    Vue.prototype[\"$\" + name] = helper\n  })\n\n  Vue.directive(\"i18n\", function(id)\n  {\n    /* eslint no-invalid-this: 0 */\n    if (id == null || isNaN(id))\n      id = this.expression\n\n    this.el.innerHTML = formatMessage(id)\n  })\n\n  Vue.component(\"text\",\n  {\n    template: '<span class=\"text\">{{{ translated }}}</span>',\n    props: {\n      msg: {\n        type: String,\n        required: true\n      }\n    },\n    computed: {\n      translated: function(...formatOptions) {\n        return formatMessage(this.msg, ...formatOptions);\n      }\n    }\n  })\n\n\n\n\n  // =============================================\n  //   ADDITIONAL FILTERS\n  // =============================================\n\n  // Via: http://jsfiddle.net/6jjuoypf/2/\n  Vue.filter(\"format-currency\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val)\n    {\n      var numberOptions =\n      {\n        style: \"currency\",\n        currency: currency,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      }\n\n      return formatNumber(val == null || val === \"\" || isNaN(val) ? 0 : val, numberOptions)\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-currency-precise\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val) {\n      return formatNumber(val == null || val === \"\" || isNaN(val) ? 0 : val, \"currency\")\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-percent\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val, fractionDigits)\n    {\n      return formatNumber(val == null || val === \"\" ? 0 : clamp(val / 100, 0, 1),\n      {\n        style: \"percent\",\n        minimumFractionDigits: fractionDigits == null ? 0 : fractionDigits,\n        maximumFractionDigits: fractionDigits == null ? maximumFractionDigits : fractionDigits\n      })\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n\n  Vue.filter(\"format-number\",\n  {\n    // model -> view: formats the value when updating the input element.\n    read: function(val, fractionDigits)\n    {\n      return val == null || val === \"\" ? 0 : formatNumber(val,\n      {\n        minimumFractionDigits: fractionDigits == null ? 0 : fractionDigits,\n        maximumFractionDigits: fractionDigits == null ? maximumFractionDigits : fractionDigits\n      })\n    },\n\n    // view -> model: formats the value when writing to the data.\n    write: function(val) {\n      return parseToNumber(val)\n    }\n  })\n}\n\nvar plugin = {\n  install\n}\n\nexport default plugin\n"]}